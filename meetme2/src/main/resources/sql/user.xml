<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="Users">
	<select resultType="User" parameterType="String" id="idcheck">
		select user_num, user_id, CryptString.decrypt(user_pass, 'encrypt') user_pass, user_name, user_email, user_gender, user_age, user_city, user_original, user_save, usercertification
		from mm_user where user_id = #{user_id}
	</select>
	
	<select resultType="User" parameterType="String" id="userinfo">
		select *
		from mm_user where user_id = #{user_id}
	</select>

	<select resultType="User" parameterType="String" id="emailcheck">
		select user_num, user_id, CryptString.decrypt(user_pass, 'encrypt') user_pass, user_name, user_email, user_gender, user_age, user_city, user_original, user_save, usercertification
		from mm_user where user_email = #{user_email}
	</select>


	<insert parameterType="User" id="insert">
		insert into mm_user
		values((select nvl(max(user_num),0)+1 from mm_user),
		#{user_id},CryptString.encrypt(#{user_pass}, 'encrypt'),#{user_name},#{user_email},#{user_gender},#{user_age},#{user_city},
		#{user_save}, #{user_original}, 0)
	</insert>

	<select id="selectNum" parameterType="String" resultType="User">
		select user_num, user_id, CryptString.decrypt(user_pass, 'encrypt') user_pass, user_name, user_email, user_gender, user_age, user_city, user_original, user_save, usercertification
		from mm_user
		where user_id = #{user_id}
	</select>

	<insert id="insert_inter" parameterType="User_interests">
		INSERT INTO
		mm_user_interests
		VALUES(#{user_num}, #{category_num})
	</insert>


	<insert id="createAuthKey">
		insert into userAuth values(#{user_email},
		#{authKey})
	</insert>

	<update id="userAuth">
		<![CDATA[
			update mm_user 
			set userCertification = 1 
			where (select count(*) 
					from userAuth 
					where user_email = #{user_email}) > 0
		]]>
	</update>

	<insert id="myhome" parameterType="int">
		insert into
		mm_myhome(user_num, myhome_num)
		values(#{user_num}, #{user_num})
	</insert>

	<select id="getSearchList" parameterType="map" resultType="user">
		select *
		from (select rownum rnum, b.*
		from (select * from mm_user
		where user_id != 'admin'
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='user_num'">user_num</when>
				<when test="search_field=='user_id'">user_id</when>
				<when test="search_field=='user_name'">user_name</when>
			</choose>
			like #{search_word}
		</if>
		order by user_num desc)b
		)
		where rnum &gt;=#{start} and rnum &lt;=
		#{end}
	</select>

	<select id="searchcount" parameterType="map" resultType="int">
		select count(*) from mm_user
		where user_id!='admin'
		<if test="search_field!=null">
			and
			<choose>
				<when test="search_field=='user_num'">user_num</when>
				<when test="search_field=='user_id'">user_id</when>
				<when test="search_field=='user_name'">user_name</when>
			</choose>
			like #{search_word}
		</if>
	</select>

	<delete id="delete" parameterType="String">
		delete from mm_user 
		where user_id=#{user_id}
	</delete>

	<select id="getFriends" parameterType="map" resultType="user">
		SELECT
		DISTINCT u.*
		FROM MM_FOLLOWS f
		JOIN MM_USER u
		on (u.USER_NUM =
		f.FOLLOWING_NUM)
		WHERE (upper(USER_ID) LIKE upper(#{title}) OR
		upper(USER_NAME) LIKE upper(#{title}))
		AND F.USER_NUM = #{userNum}
	</select>

	<select id="getRandomUser" parameterType="String" resultType="user">
		<![CDATA[select * from (select * from MM_USER where USER_ID != 'admin' order by dbms_random.value) where rownum < 4]]>
			AND USER_ID != #{user_num}
	</select>
	<!-- sample(##) 테이블이 가지고 있는 수의 ##% -->

	<update id="update" parameterType="user">
		update mm_user set
		user_name=#{user_name}, user_pass=CryptString.encrypt(#{user_pass}, 'encrypt'),
		user_email=#{user_email}, user_gender=#{user_gender},
		user_age=#{user_age}, user_city=#{user_city},
		user_save=#{user_save},
		user_original=#{user_original}
		where user_id=#{user_id}
	</update>

	<insert id="follow" parameterType="map">
		insert into MM_FOLLOWS
		values(#{userKey}, #{following})
	</insert>

	<select id="followCheck" parameterType="map" resultType="String">
		select count(*) 
		from MM_FOLLOWS 
		where USER_NUM = #{userKey} 
		and FOLLOWING_NUM = #{following}
	</select>

	<select id="user_info_email" parameterType="String"
		resultType="user">
		select user_num, user_id, CryptString.decrypt(user_pass, 'encrypt') user_pass, user_name, user_email, user_gender, user_age, user_city, user_original, user_save, usercertification
		from MM_USER join USERAUTH using(USER_EMAIL) 
		where user_email = #{user_email}
	</select>
	
	<update id="setPassword" parameterType="user">
		update MM_USER 
		set USER_PASS = CryptString.encrypt(#{user_pass}, 'encrypt') 
		where USER_EMAIL = #{user_email}
	</update>

</mapper>


